{"/home/travis/build/npmtest/node-npmtest-wrench/test.js":"/* istanbul instrument in package npmtest_wrench */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wrench/lib.npmtest_wrench.js":"/* istanbul instrument in package npmtest_wrench */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wrench = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wrench = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wrench/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wrench && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wrench */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wrench\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wrench.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_wrench.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wrench.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_wrench.__dirname +\n                    '/lib.npmtest_wrench.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wrench/wrench/lib/wrench.js":"/*  wrench.js\n *\n *  A collection of various utility functions I've found myself in need of\n *  for use with Node.js (http://nodejs.org/). This includes things like:\n *\n *  - Recursively deleting directories in Node.js (Sync, not Async)\n *  - Recursively copying directories in Node.js (Sync, not Async)\n *  - Recursively chmoding a directory structure from Node.js (Sync, not Async)\n *  - Other things that I'll add here as time goes on. Shhhh...\n *\n *  ~ Ryan McGrath (ryan [at] venodesigns.net)\n */\n\nvar fs = require(\"fs\"),\n    _path = require(\"path\"),\n    isWindows = !!process.platform.match(/^win/);\n\n/*  wrench.readdirSyncRecursive(\"directory_path\");\n *\n *  Recursively dives through directories and read the contents of all the\n *  children directories.\n */\nexports.readdirSyncRecursive = function(baseDir) {\n    baseDir = baseDir.replace(/\\/$/, '');\n\n    var readdirSyncRecursive = function(baseDir) {\n        var files = [],\n            curFiles,\n            nextDirs,\n            isDir = function(fname){\n                return fs.existsSync(_path.join(baseDir, fname)) ? fs.statSync( _path.join(baseDir, fname) ).isDirectory() : false;\n            },\n            prependBaseDir = function(fname){\n                return _path.join(baseDir, fname);\n            };\n\n        curFiles = fs.readdirSync(baseDir);\n        nextDirs = curFiles.filter(isDir);\n        curFiles = curFiles.map(prependBaseDir);\n\n        files = files.concat( curFiles );\n\n        while (nextDirs.length) {\n            files = files.concat( readdirSyncRecursive( _path.join(baseDir, nextDirs.shift()) ) );\n        }\n\n        return files;\n    };\n\n    // convert absolute paths to relative\n    var fileList = readdirSyncRecursive(baseDir).map(function(val){\n        return _path.relative(baseDir, val);\n    });\n\n    return fileList;\n};\n\n/*  wrench.readdirRecursive(\"directory_path\", function(error, files) {});\n *\n *  Recursively dives through directories and read the contents of all the\n *  children directories.\n *\n *  Asynchronous, so returns results/error in callback.\n *  Callback receives the of files in currently recursed directory.\n *  When no more directories are left, callback is called with null for all arguments.\n *\n */\nexports.readdirRecursive = function(baseDir, fn) {\n    baseDir = baseDir.replace(/\\/$/, '');\n\n    var waitCount = 0;\n\n    function readdirRecursive(curDir) {\n        var prependcurDir = function(fname){\n            return _path.join(curDir, fname);\n        };\n\n        waitCount++;\n        fs.readdir(curDir, function(e, curFiles) {\n            if (e) {\n                fn(e);\n                return;\n            }\n            waitCount--;\n\n            curFiles = curFiles.map(prependcurDir);\n\n            curFiles.forEach(function(it) {\n                waitCount++;\n\n                fs.stat(it, function(e, stat) {\n                    waitCount--;\n\n                    if (e) {\n                        fn(e);\n                    } else {\n                        if (stat.isDirectory()) {\n                            readdirRecursive(it);\n                        }\n                    }\n\n                    if (waitCount == 0) {\n                        fn(null, null);\n                    }\n                });\n            });\n\n            fn(null, curFiles.map(function(val) {\n                // convert absolute paths to relative\n                return _path.relative(baseDir, val);\n            }));\n\n            if (waitCount == 0) {\n                fn(null, null);\n            }\n        });\n    };\n\n    readdirRecursive(baseDir);\n};\n\n\n\n\n\n/*  wrench.rmdirSyncRecursive(\"directory_path\", failSilent);\n *\n *  Recursively dives through directories and obliterates everything about it. This is a\n *  Sync-function, which blocks things until it's done. No idea why anybody would want an\n *  Asynchronous version. :\\\n */\nexports.rmdirSyncRecursive = function(path, failSilent) {\n    var files;\n\n    try {\n        files = fs.readdirSync(path);\n    } catch (err) {\n\n        if(failSilent) return;\n        throw new Error(err.message);\n    }\n\n    /*  Loop through and delete everything in the sub-tree after checking it */\n    for(var i = 0; i < files.length; i++) {\n        var file = _path.join(path, files[i]);\n        var currFile = fs.lstatSync(file);\n\n        if(currFile.isDirectory())  {\n            // Recursive function back to the beginning\n            exports.rmdirSyncRecursive(file);\n        } else if(currFile.isSymbolicLink()) {\n            // Unlink symlinks\n            if (isWindows) {\n                fs.chmodSync(file, 666) // Windows needs this unless joyent/node#3006 is resolved..\n            }\n\n            fs.unlinkSync(file);\n        } else {\n            // Assume it's a file - perhaps a try/catch belongs here?\n            if (isWindows) {\n                fs.chmodSync(file, 666) // Windows needs this unless joyent/node#3006 is resolved..\n            }\n\n            fs.unlinkSync(file);\n        }\n    }\n\n    /*  Now that we know everything in the sub-tree has been deleted, we can delete the main\n     directory. Huzzah for the shopkeep. */\n    return fs.rmdirSync(path);\n};\n\n\n\nfunction isFileIncluded(opts, dir, filename) {\n\n    function isMatch(filter) {\n        if (typeof filter === 'function') {\n            return filter(filename, dir) === true;\n        }\n        else {\n            // Maintain backwards compatibility and use just the filename\n            return filename.match(filter);\n        }\n    }\n\n    if (opts.include || opts.exclude) {\n        if (opts.exclude) {\n            if (isMatch(opts.exclude)) {\n                return false;\n            }\n        }\n\n        if (opts.include) {\n            if (isMatch(opts.include)) {\n                return true;\n            }\n            else  {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    else if (opts.filter) {\n        var filter = opts.filter;\n\n        if (!opts.whitelist) {\n            // if !opts.whitelist is false every file or directory \n            // which does match opts.filter will be ignored\n            return isMatch(filter) ? false : true;\n        } else {\n            // if opts.whitelist is true every file or directory \n            // which doesn't match opts.filter will be ignored\n            return !isMatch(filter) ? false : true;\n        }\n    }\n\n    return true;\n}\n\n/*  wrench.copyDirSyncRecursive(\"directory_to_copy\", \"new_directory_location\", opts);\n *\n *  Recursively dives through a directory and moves all its files to a new location. This is a\n *  Synchronous function, which blocks things until it's done. If you need/want to do this in\n *  an Asynchronous manner, look at wrench.copyDirRecursively() below. Specify forceDelete to force directory overwrite.\n *\n *  Note: Directories should be passed to this function without a trailing slash.\n */\nexports.copyDirSyncRecursive = function(sourceDir, newDirLocation, opts) {\n    opts = opts || {};\n\n    try {\n        if(fs.statSync(newDirLocation).isDirectory()) { \n            if(opts.forceDelete) {\n            exports.rmdirSyncRecursive(newDirLocation);\n            } else {\n                return new Error('You are trying to delete a directory that already exists. Specify forceDelete in the opts argument to override this. Bailing~');\n            }\n        }\n    } catch(e) { }\n\n    /*  Create the directory where all our junk is moving to; read the mode of the source directory and mirror it */\n    var checkDir = fs.statSync(sourceDir);\n    try {\n        fs.mkdirSync(newDirLocation, checkDir.mode);\n    } catch (e) {\n        //if the directory already exists, that's okay\n        if (e.code !== 'EEXIST') throw e;\n    }\n\n    var files = fs.readdirSync(sourceDir);\n    var hasFilter = opts.filter || opts.include || opts.exclude;\n    var preserveFiles = opts.preserveFiles === true;\n    var preserveTimestamps = opts.preserveTimestamps === true;\n\n    for(var i = 0; i < files.length; i++) {\n        // ignores all files or directories which match the RegExp in opts.filter\n        if(typeof opts !== 'undefined') {\n            if (hasFilter) {\n                if (!isFileIncluded(opts, sourceDir, files[i])) {\n                    continue;\n                }\n            }\n            \n            if (opts.excludeHiddenUnix && /^\\./.test(files[i])) continue;\n        }\n\n        var currFile = fs.lstatSync(_path.join(sourceDir, files[i]));\n\n        var fCopyFile = function(srcFile, destFile) {\n            if(typeof opts !== 'undefined' && opts.preserveFiles && fs.existsSync(destFile)) return;\n\n            var contents = fs.readFileSync(srcFile);\n            fs.writeFileSync(destFile, contents);\n            var stat =  fs.lstatSync(srcFile);\n            fs.chmodSync(destFile, stat.mode);\n            if (preserveTimestamps) {\n                fs.utimesSync(destFile, stat.atime, stat.mtime)\n            }\n        };\n\n        if(currFile.isDirectory()) {\n            /*  recursion this thing right on back. */\n            exports.copyDirSyncRecursive(_path.join(sourceDir, files[i]), _path.join(newDirLocation, files[i]), opts);\n        } else if(currFile.isSymbolicLink()) {\n            var symlinkFull = fs.readlinkSync(_path.join(sourceDir, files[i]));\n            symlinkFull = _path.resolve(fs.realpathSync(sourceDir), symlinkFull);\n\n            if (typeof opts !== 'undefined' && !opts.inflateSymlinks) {\n                fs.symlinkSync(symlinkFull, _path.join(newDirLocation, files[i]));\n                continue;\n            }\n\n            var tmpCurrFile = fs.lstatSync(symlinkFull);\n            if (tmpCurrFile.isDirectory()) {\n                exports.copyDirSyncRecursive(symlinkFull, _path.join(newDirLocation, files[i]), opts);\n            } else {\n                /*  At this point, we've hit a file actually worth copying... so copy it on over. */\n                fCopyFile(symlinkFull, _path.join(newDirLocation, files[i]));\n            }\n        } else {\n            /*  At this point, we've hit a file actually worth copying... so copy it on over. */\n            fCopyFile(_path.join(sourceDir, files[i]), _path.join(newDirLocation, files[i]));\n        }\n    }\n};\n\n/*  wrench.chmodSyncRecursive(\"directory\", filemode);\n *\n *  Recursively dives through a directory and chmods everything to the desired mode. This is a\n *  Synchronous function, which blocks things until it's done.\n *\n *  Note: Directories should be passed to this function without a trailing slash.\n */\nexports.chmodSyncRecursive = function(sourceDir, filemode) {\n    var files = fs.readdirSync(sourceDir);\n\n    for(var i = 0; i < files.length; i++) {\n        var currFile = fs.lstatSync(_path.join(sourceDir, files[i]));\n\n        if(currFile.isDirectory()) {\n            /*  ...and recursion this thing right on back. */\n            exports.chmodSyncRecursive(_path.join(sourceDir, files[i]), filemode);\n        } else {\n            /*  At this point, we've hit a file actually worth copying... so copy it on over. */\n            fs.chmod(_path.join(sourceDir, files[i]), filemode);\n        }\n    }\n\n    /*  Finally, chmod the parent directory */\n    fs.chmod(sourceDir, filemode);\n};\n\n\n/*  wrench.chownSyncRecursive(\"directory\", uid, gid);\n *\n *  Recursively dives through a directory and chowns everything to the desired user and group. This is a\n *  Synchronous function, which blocks things until it's done.\n *\n *  Note: Directories should be passed to this function without a trailing slash.\n */\nexports.chownSyncRecursive = function(sourceDir, uid, gid) {\n    var files = fs.readdirSync(sourceDir);\n\n    for(var i = 0; i < files.length; i++) {\n        var currFile = fs.lstatSync(_path.join(sourceDir, files[i]));\n\n        if(currFile.isDirectory()) {\n            /*  ...and recursion this thing right on back. */\n            exports.chownSyncRecursive(_path.join(sourceDir, files[i]), uid, gid);\n        } else {\n            /*  At this point, we've hit a file actually worth chowning... so own it. */\n            fs.chownSync(_path.join(sourceDir, files[i]), uid, gid);\n        }\n    }\n\n    /*  Finally, chown the parent directory */\n    fs.chownSync(sourceDir, uid, gid);\n};\n\n\n\n/*  wrench.rmdirRecursive(\"directory_path\", callback);\n *\n *  Recursively dives through directories and obliterates everything about it.\n */\nexports.rmdirRecursive = function rmdirRecursive(dir, failSilent, clbk){\n    if(clbk === null || typeof clbk == 'undefined')\n        clbk = function(err) {};\n\n    fs.readdir(dir, function(err, files) {\n        if(err && typeof failSilent === 'boolean' && !failSilent) \n        return clbk(err);\n\n        if(typeof failSilent === 'function')\n            clbk = failSilent;\n        \n        (function rmFile(err){\n            if (err) return clbk(err);\n\n            var filename = files.shift();\n            if (filename === null || typeof filename == 'undefined')\n                return fs.rmdir(dir, clbk);\n\n            var file = dir+'/'+filename;\n            fs.lstat(file, function(err, stat){\n                if (err) return clbk(err);\n                if (stat.isDirectory())\n                    rmdirRecursive(file, rmFile);\n                else\n                    fs.unlink(file, rmFile);\n            });\n        })();\n    });\n};\n\n/*  wrench.copyDirRecursive(\"directory_to_copy\", \"new_location\", {forceDelete: bool}, callback);\n *\n *  Recursively dives through a directory and moves all its files to a new\n *  location. Specify forceDelete to force directory overwrite.\n *\n *  Note: Directories should be passed to this function without a trailing slash.\n */\nexports.copyDirRecursive = function copyDirRecursive(srcDir, newDir, opts, clbk) {\n    var originalArguments = Array.prototype.slice.apply(arguments);\n    srcDir = _path.normalize(srcDir);\n    newDir = _path.normalize(newDir);\n\n    fs.stat(newDir, function(err, newDirStat) {\n        if(!err) {\n            if(typeof opts !== 'undefined' && typeof opts !== 'function' && opts.forceDelete)\n                return exports.rmdirRecursive(newDir, function(err) {\n                    copyDirRecursive.apply(this, originalArguments);\n                });\n            else\n                return clbk(new Error('You are trying to delete a directory that already exists. Specify forceDelete in an options object to override this.'));\n        }\n\n\tif(typeof opts === 'function')\n\t\tclbk = opts;\n\n        fs.stat(srcDir, function(err, srcDirStat){\n            if (err) return clbk(err);\n            fs.mkdir(newDir, srcDirStat.mode, function(err){\n                if (err) return clbk(err);\n                fs.readdir(srcDir, function(err, files){\n                    if (err) return clbk(err);\n                    (function copyFiles(err){\n                        if (err) return clbk(err);\n\n                        var filename = files.shift();\n                        if (filename === null || typeof filename == 'undefined')\n                            return clbk(null);\n\n                        var file = srcDir+'/'+filename,\n                            newFile = newDir+'/'+filename;\n\n                        fs.stat(file, function(err, fileStat){\n                            if (err) return clbk(err);\n                            if (fileStat.isDirectory())\n                                copyDirRecursive(file, newFile, copyFiles, clbk);\n                            else if (fileStat.isSymbolicLink())\n                                fs.readlink(file, function(err, link){\n                                    if (err) return clbk(err);\n                                    fs.symlink(link, newFile, copyFiles);\n                                });\n                            else\n                                fs.readFile(file, function(err, data){\n                                    if (err) return clbk(err);\n                                    fs.writeFile(newFile, data, copyFiles);\n                                });\n                        });\n                    })();\n                });\n            });\n        });\n    });\n};\n\nvar mkdirSyncRecursive = function(path, mode) {\n    var self = this;\n    path = _path.normalize(path)\n\n    try {\n        fs.mkdirSync(path, mode);\n    } catch(err) {\n        if(err.code == \"ENOENT\") {\n            var slashIdx = path.lastIndexOf(_path.sep);\n\n            if(slashIdx > 0) {\n                var parentPath = path.substring(0, slashIdx);\n                mkdirSyncRecursive(parentPath, mode);\n                mkdirSyncRecursive(path, mode);\n            } else {\n                throw err;\n            }\n        } else if(err.code == \"EEXIST\") {\n            return;\n        } else {\n            throw err;\n        }\n    }\n};\nexports.mkdirSyncRecursive = mkdirSyncRecursive;\n\nexports.LineReader = function(filename, bufferSize) {\n    this.bufferSize = bufferSize || 8192;\n    this.buffer = \"\";\n    this.fd = fs.openSync(filename, \"r\");\n    this.currentPosition = 0;\n};\n\nexports.LineReader.prototype = {\n    close: function() {\n        return fs.closeSync(this.fd);\n    },\n\n    getBufferAndSetCurrentPosition: function(position) {\n        var res = fs.readSync(this.fd, this.bufferSize, position, \"ascii\");\n\n        this.buffer += res[0];\n        if(res[1] === 0) {\n            this.currentPosition = -1;\n        } else {\n            this.currentPosition = position + res[1];\n        }\n\n        return this.currentPosition;\n    },\n\n    hasNextLine: function() {\n        while(this.buffer.indexOf('\\n') === -1) {\n            this.getBufferAndSetCurrentPosition(this.currentPosition);\n            if(this.currentPosition === -1) return false;\n        }\n\n        if(this.buffer.indexOf(\"\\n\") > -1 || this.buffer.length !== 0) return true;\n        return false;\n    },\n\n    getNextLine: function() {\n        var lineEnd = this.buffer.indexOf(\"\\n\"),\n            result = this.buffer.substring(0, lineEnd != -1 ? lineEnd : this.buffer.length);\n\n        this.buffer = this.buffer.substring(result.length + 1, this.buffer.length);\n        return result;\n    }\n};\n\n// vim: et ts=4 sw=4\n"}